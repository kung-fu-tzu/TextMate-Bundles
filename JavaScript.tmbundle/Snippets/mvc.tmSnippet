<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>content</key>
	<string>;(function(){

var myName = '${1:WidgetName}',
	Me = self[myName] = MVC.create(myName)

// Me.mixIn(EventDriven)

var myProto =
{
	initialize: function ()
	{
		this.model.initialize()
		this.view.initialize()
		this.controller.initialize()
	},

	bind: function (nodes, sources, state)
	{
		this.model.bind(sources)
		this.view.bind(nodes)
		this.controller.bind(state)
		
		return this
	}
}

Object.extend(Me.prototype, myProto)

})();


;(function(){

var Papa = ${1:WidgetName}, Me = Papa.View

eval(NodesShortcut.include())

var myProto =
{
	initialize: function ()
	{
		this.nodes = {}
	},
	
	bind: function (nodes)
	{
		this.nodes = nodes
		
		${2:this.nodes.word = this.nodes.main.appendChild(T(''))}
		
		return this
	},
	
	modelChanged: function (data)
	{
		this.nodes.word.nodeValue = data
	}
}

Object.extend(Me.prototype, myProto)

})();


;(function(){

var Papa = ${1:WidgetName}, Me = Papa.Controller

var myProto =
{
	initialize: function ()
	{
		this.state = {}
	},
	
	bind: function (state)
	{
		this.model.setState(state)
	}
}

Object.extend(Me.prototype, myProto)

})();


;(function(){

var Papa = ${1:WidgetName}, Me = Papa.Model

var myProto =
{
	initialize: function ()
	{
		this.sources = {}
		this.state = {}
	},
	
	bind: function (sources)
	{
		this.sources = sources
	},
	
	setState: function (state)
	{
		this.state = state
		this.word = this.sources.words[state.selected]
		this.view.modelChanged(this.word)
	}
}

Object.extend(Me.prototype, myProto)

})();

var widget = new ${1:WidgetName}()
widget.bind({main: document.body}, {words:["zero", "one", "two", "three"]}, {selected:0})</string>
	<key>name</key>
	<string>mvc</string>
	<key>scope</key>
	<string>source.js</string>
	<key>tabTrigger</key>
	<string>mvc</string>
	<key>uuid</key>
	<string>417EC890-E0A4-4CC9-B866-F4511ACC7B3E</string>
</dict>
</plist>
